@page "/warehouses"
@using DepoQuick.Models
@using DepoQuick.Backend.Services
@inject WarehouseService WarehouseService
@inject NavigationManager NavigationManager
@inject AuthService AuthService

<header>
    <h1>Warehouses</h1>
    <a href="/warehouses/new">
        Create new
    </a>
</header>
<main>
    <table>
        <thead>
        <tr>
            <th>Name</th>
            <th>Zone</th>
            <th>Size</th>
            <th>Heated</th>
            <th>Availability</th>
            @if (AuthService.AuthedUser is not null && AuthService.AuthedUser!.IsAdmin)
            {
                <th class="small-centered">Actions</th>
            }
        </tr>
        </thead>
        <tbody>

        @if (_warehouses == null)
        {
            <tr class="status-message">
                <td colspan="7">Loading...</td>
            </tr>
        }
        else if (_warehouses.Count == 0)
        {
            <tr>
                <td colspan="7" class="status-message">No warehouses found</td>
            </tr>
        }
        else
        {
            @foreach (var warehouse in _warehouses)
            {
                <tr>
                    <td>@warehouse.Name</td>
                    <td>@warehouse.Zone</td>
                    <td>@warehouse.Size</td>
                    <td>@(warehouse.IsHeated ? "Yes" : "No")</td>
                    <td>@(warehouse.AvailableFrom.ToShortDateString()) - @(warehouse.AvailableTo.ToShortDateString())</td>
                    @if (AuthService.AuthedUser is not null &&  AuthService.AuthedUser!.IsAdmin)
                    {
                        <td class="small-centered">
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" @onclick=@(() => OnDeleteWarehouse(warehouse.WarehouseId))>
                                <path fill-rule="evenodd" d="M8.75 1A2.75 2.75 0 0 0 6 3.75v.443c-.795.077-1.584.176-2.365.298a.75.75 0 1 0 .23 1.482l.149-.022.841 10.518A2.75 2.75 0 0 0 7.596 19h4.807a2.75 2.75 0 0 0 2.742-2.53l.841-10.52.149.023a.75.75 0 0 0 .23-1.482A41.03 41.03 0 0 0 14 4.193V3.75A2.75 2.75 0 0 0 11.25 1h-2.5ZM10 4c.84 0 1.673.025 2.5.075V3.75c0-.69-.56-1.25-1.25-1.25h-2.5c-.69 0-1.25.56-1.25 1.25v.325C8.327 4.025 9.16 4 10 4ZM8.58 7.72a.75.75 0 0 0-1.5.06l.3 7.5a.75.75 0 1 0 1.5-.06l-.3-7.5Zm4.34.06a.75.75 0 1 0-1.5-.06l-.3 7.5a.75.75 0 1 0 1.5.06l.3-7.5Z" clip-rule="evenodd"/>
                            </svg>
                        </td>
                    }
                </tr>
            }
        }
        </tbody>
    </table>
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">
            @errorMessage
            <button @onclick="ClearErrorMessage">Ok</button>
        </div>
    }
</main>

@code {
    private List<Warehouse>? _warehouses;
    private string errorMessage = string.Empty;

    private void OnDeleteWarehouse(int id)
    {
        if (AuthService.AuthedUser is not null && AuthService.AuthedUser!.IsAdmin)
        {
            try
            {
                WarehouseService.DeleteWarehouse(id);
                _warehouses = WarehouseService.GetAllWarehouses();
            }
            catch (InvalidOperationException ex)
            {
                errorMessage = "Cannot delete warehouse with active reservations";
            }
        }
    }

    private void ClearErrorMessage()
    {
        errorMessage = string.Empty;
    }

    protected override void OnInitialized()
    {
        if (AuthService.AuthedUser is not null && !AuthService.AuthedUser.IsAdmin)
        {
            NavigationManager.NavigateTo("/");
        }

        _warehouses = WarehouseService.GetAllWarehouses();
    }
}